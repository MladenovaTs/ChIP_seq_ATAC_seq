###
4. EN-TEx ATAC-seq data: downstream analyses  
###


# TASK 1: Move to folder ATAC-seq, and create folders to store bigBed data files and peaks analyses files 

sudo docker run -v $PWD:$PWD -w $PWD --rm -it dgarrimar/epigenomics_course 
cd epigenomics_uvic/ATAC-seq
mkdir analyses data data/bigBed.files analyses/peaks.analysis

# TASK 2: Retrieve from a newly generated metadata file ATAC-seq peaks (bigBed narrow, pseudoreplicated peaks, assembly GRCh38) for stomach and sigmoid_colon for the same donor used in the previous sections -> donor (ENCDO451RUA) -> URL of the metadata file (first line of the file.txt) "https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&assay_slims=DNA+accessibility&assay_title=ATAC-seq&biosample_ontology.term_name=sigmoid+colon&biosample_ontology.term_name=stomach&type=Experiment"

head -1 metadata.tsv | awk 'BEGIN{FS=OFS="\t"}{for (i=1;i<=NF;i++){print $i, i}}'

## Retrieve the corresponding IDs for the requested files 
grep -F "bigBed narrowPeak" metadata.tsv |\
grep -F "pseudoreplicated peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11}' |\
sort -k2,2 -k1,1r > analyses/bigBed.peaks.ids.txt

head analyses/bigBed.peaks.ids.txt
## ENCFF287UHP sigmoid colon 
## ENCFF762IFP stomach

## Download bigBed files
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
  wget -P data/bigBed.files https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed
done

## Retrieve MD5 hashes
../bin/selectRows.sh <(cut -f1 analyses/bigBed.peaks.ids.txt) metadata.tsv | cut -f1,46 > data/bigBed.files/md5sum.txt

cat data/bigBed.files/md5sum.txt |\
while read filename original_md5sum; do 
    md5sum data/bigBed.files/"$filename".bigBed |\
    awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
done > md5 
mv md5 data/bigBed.files/md5sum.txt
awk '$2!=$3' data/bigBed.files/md5sum.txt
## No difference between original and computed MD5 hashes


# TASK 3.1: Number of peaks that intersect promoter regions

mkdir data/bed.files

## Convert bigBed files to BED files 
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

## Download annotation file
mkdir annotation
wget https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/gencode.v24.protein.coding.non.redundant.TSS.bed
mv gencode.v24.protein.coding.non.redundant.TSS.bed annotation/gencode.v24.protein.coding.non.redundant.TSS.bed


## Retrieve the peaks at the promoter region in each tissue
cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do 
  bedtools intersect -b annotation/gencode.v24.protein.coding.non.redundant.TSS.bed -a data/bed.files/"$filename".bed -u  > analyses/peaks.analysis/peaks.promoter."$tissue".bed
done

## Number of peaks that intersect promoter regions
for tissue in stomach 'sigmoid colon'; do
wc -l analyses/peaks.analysis/peaks.promoter."$tissue".bed
done

## 44749 analyses/peaks.analysis/peaks.promoter.stomach.bed
## 47871 analyses/peaks.analysis/peaks.promoter.sigmoid colon.bed


# TASK 3.2 Number of peaks that fall outside gene coordinates

## Download the gencode.v24.primary_assembly.annotation
wget -P annotation https://www.encodeproject.org/files/gencode.v24.primary_assembly.annotation/@@download/gencode.v24.primary_assembly.annotation.gtf.gz
gunzip annotation/gencode.v24.primary_assembly.annotation.gtf.gz

## Convert gtf annotation file to a BED format
awk '$3=="gene"' annotation/gencode.v24.primary_assembly.annotation.gtf |\
grep -F "protein_coding" |\
cut -d ";" -f1 |\
awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' |\
sed 's/\"//g' |\
awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2-1); print $0}' > annotation/gencode.v24.protein.coding.gene.body.bed

## Number of peaks that fall outside gene coordinates 
cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do 
  bedtools intersect -b annotation/gencode.v24.protein.coding.gene.body.bed -a data/bed.files/"$filename".bed -v > analyses/peaks.analysis/peaks.outside.gene.body."$tissue".bed
done

## Number of peaks that fall outside the gene coordinates in each tissue
for tissue in stomach 'sigmoid colon'; do
wc -l analyses/peaks.analysis/peaks.outside.gene.body."$tissue".bed
done

## 34537 analyses/peaks.analysis/peaks.outside.gene.body.stomach.bed
## 37035 analyses/peaks.analysis/peaks.outside.gene.body.sigmoid colon.bed


###
5. Distal regulatory activity  
###

# TASK 1: Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results

cd ..
mkdir regulatory_elements
cd regulatory_elements

# TASK 2: Overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue

mkdir analyses data data/bigBed.files

## Download the metadata file
../bin/download.metadata.sh "https://www.encodeproject.org/metadata/?type=Experiment&replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&assembly=GRCh38&biosample_ontology.term_name=sigmoid+colon&biosample_ontology.term_name=stomach&assay_slims=DNA+binding" 

head -1 metadata.tsv | awk 'BEGIN{FS=OFS="\t"}{for (i=1;i<=NF;i++){print $i, i}}'

## Retrieve bigBed peak calling files
grep -e H3K27ac -e H3K4me1 metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -k3,4 -u > analyses/bigBed.peaks.ids.txt

less analyses/bigBed.peaks.ids.txt
## ENCFF872UHN sigmoid_colon H3K27ac-human
## ENCFF724ZOF sigmoid_colon H3K4me1-human
## ENCFF977LBD stomach H3K27ac-human
## ENCFF844XRN stomach H3K4me1-human
q

## Download the bigBed files 
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
  wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
  done

## Retrieve MD5 hashes
../bin/selectRows.sh <(cut -f1 analyses/bigBed.peaks.ids.txt) metadata.tsv | cut -f1,46 > data/bigBed.files/md5sum.txt
cat data/bigBed.files/md5sum.txt |\
while read filename original_md5sum; do 
    md5sum data/bigBed.files/"$filename".bigBed |\
    awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
done > md5 
mv md5 data/bigBed.files/md5sum.txt

awk '$2!=$3' data/bigBed.files/md5sum.txt
## No difference between original and computed MD5 hashes

## Convert bigBed files of H3K27ac AND H3K4me1 peaks to BED files 

mkdir data/bed.files
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

## Open regions with peaks of H3K27ac for each tissue 
mkdir analyses/peaks.analysis

awk '$3=="H3K27ac-human"{print $1, $2}' analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do
  bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/peaks.outside.gene.coord."$tissue".bed -b 
data/bed.files/"$filename".bed -u > analyses/peaks.analysis/peaks.H3K27ac."$tissue".bed 
done

## Open regions with peaks of H3K27ac AND of H3K4me1 for each tissue
awk '$3=="H3K4me1-human"{print $1, $2}' analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do
  bedtools intersect -a analyses/peaks.analysis/peaks.H3K27ac."$tissue".bed -b data/bed.files/"$filename".bed -u > analyses/peaks.analysis/peaks.H3K27ac.H3K4me1."$tissue".bed 
done

## Number of candidate distal regulatory elements, open regions overlapping peaks of H3K27ac AND of H3K4me1, in each tissue
for tissue in stomach sigmoid_colon; do
wc -l analyses/peaks.analysis/peaks.H3K27ac.H3K4me1."$tissue".bed
done

## 8022 in stomach
## 14215 in sigmoid colon


# TASK 3: Focus on regulatory elements that are located on chromosome 1, and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region

for tissue in sigmoid_colon stomach; do
awk 'BEGIN{FS=OFS="\t"}$1=="chr1"{print $4, $2}' analyses/peaks.analysis/peaks.H3K27ac.H3K4me1."$tissue".bed > analyses/peaks.analysis/regulatory.elements.starts."$tissue".tsv
done

# TASK 4: Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column 

awk 'BEGIN{FS=OFS="\t"}$1=="chr1"{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' ATAC-seq/annotation/gencode.v24.protein.coding.gene.body.bed > analyses/peaks.analysis/gene.starts.tsv

# TASK 5: Download or copy this python script inside the epigenomics_uvic/bin folder. Have a look at the help page of this script to understand how it works. This script takes as input two distinct arguments: 1) --input corresponds to the file gene.starts.tsv (i.e. the file you generated in Task #4); 2) --start corresponds to the 5' coordinate of a regulatory element. Complete the python script so that for a given coordinate --start the script returns the closest gene, the start of the gene and the distance of the regulatory element.

nano ../bin/get.distance.py
###

#!/usr/bin/env python


#************
# LIBRARIES *
#************

import sys
from optparse import OptionParser


#*****************
# OPTION PARSING *
#*****************

parser = OptionParser()
parser.add_option("-i", "--input", dest="input")
parser.add_option("-s", "--start", dest="start")
options, args = parser.parse_args()

open_input = open(options.input)
enhancer_start = int(options.start)


#********
# BEGIN *
#********

x=1000000 # set maximum distance to 1 Mb
selectedGene="" # initialize the gene as empty
selectedGeneStart=0 # initialize the start coordinate of the gene as empty

for line in open_input.readlines(): # for each line in the input file
	gene, y = line.strip().split('\t') # split the line into two columns based on a tab 
	position = int(y)	# define a variable called position that correspond to the integer of the start of the gene
	diff = abs(position - enhancer_start)	# compute the absolute value of the difference between position and enhancer_start

	if diff < x:	# if this absolute value is lower than x
		x = diff	# this value will now be your current x
		selectedGene = gene	# save gene as selectedGene
		selectedGeneStart = position	# save position as selectedGeneStart

print "\t".join([selectedGene, str(selectedGeneStart), str(x)])

###

python ../bin/get.distance.py --input analyses/peaks.analysis/gene.starts.tsv --start 980000

## ENSG00000187642.9 982093  2093

# TASK 6: For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above.

for tissue in sigmoid_colon stomach; do
cat analyses/peaks.analysis/regulatory.elements.starts."$tissue".tsv |\
while read element start; do 
  python bin/get.distance.py --input analyses/peaks.analysis/gene.starts.tsv --start "$start"; 
done > analyses/peaks.analysis/regulatoryElements.genes.distances."$tissue".tsv
done

# TASK 7: Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv

R 
tissues <- c("sigmoid_colon", "stomach")

## Compute the mean and median of the distances
for (tissue in tissues) {
  file_tissue <- read.delim(paste0("regulatory_elements/analyses/peaks.analysis/regulatoryElements.genes.distances.",tissue,".tsv"), header = F, sep="\t")
  colnames(file_tissue) <- c("gene", "start", "distances")
print(paste0("The mean of the distances stored in the regulatoryElements.genes.distances.tsv file for ", tissue," is ", round(mean(file_tissue$distances), 2)))
print(paste0("The median of the distances stored in the regulatoryElements.genes.distances.tsv file for ", tissue," is ", round(median(file_tissue$distances), 2)))
}

## "The mean of the distances stored in the regulatoryElements.genes.distances.tsv file for sigmoid_colon is 73635.89"
## "The median of the distances stored in the regulatoryElements.genes.distances.tsv file for sigmoid_colon is 35802"
## "The mean of the distances stored in the regulatoryElements.genes.distances.tsv file for stomach is 45227.05"
## "The median of the distances stored in the regulatoryElements.genes.distances.tsv file for stomach is 27735"

q()

exit










